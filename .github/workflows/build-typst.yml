name: Build and Sign Typst Documentation

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'documents/**/*.pdf'

permissions:
  contents: write

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del repository
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull latest changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      # 2. Setup della toolchain Rust e installazione di Typst CLI
      - name: Set up Rust toolchain and Install Typst CLI
        uses: dtolnay/rust-toolchain@stable

      - name: Install Typst CLI
        run: |
          cargo install --locked typst-cli
          typst --version

      # 3. Compilazione dei file .typ in PDF (output in documents/)
      - name: Compile Typst files to PDF
        run: |
          find sources -type f -name "*.typ" | while read -r file; do
            output="documents/$(echo "$file" | sed 's|^sources/||; s|\.typ$|.pdf|')"
            mkdir -p "$(dirname "$output")"
            typst compile "$file" "$output"
          done

      # 4. Setup di Java (necessario per JSignPdf)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # 5. Debug: lista della directory jsignpdf-2.3.0
      - name: List jsignpdf-2.3.0 directory
        run: |
          echo "DEBUG: Current directory: $(pwd)"
          echo "DEBUG: Listing directory jsignpdf-2.3.0:"
          ls -laR jsignpdf-2.3.0

      # 6. Crea la directory nascosta .JSignPdf-2.3.0/conf e copia il file di configurazione
      - name: Create .JSignPdf-2.3.0/conf and copy configuration file
        run: |
          echo "DEBUG: Creating .JSignPdf-2.3.0/conf in $(pwd)"
          mkdir -p .JSignPdf-2.3.0/conf
          cp jsignpdf-2.3.0/conf/conf.properties .JSignPdf-2.3.0/conf/conf.properties
          echo "DEBUG: Listing .JSignPdf-2.3.0/conf:"
          ls -laR .JSignPdf-2.3.0/conf
          echo "DEBUG: Content of .JSignPdf-2.3.0/conf/conf.properties:"
          cat .JSignPdf-2.3.0/conf/conf.properties

      # 7. Debug: mostra il workspace
      - name: Debug Workspace Paths
        run: |
          echo "DEBUG: Workspace directory: $(pwd)"
          echo "DEBUG: Listing root directory:"
          ls -la

      # 8. Decodifica del certificato PKCS#12 dal secret e salvataggio in cert.p12
      - name: Decode signing certificate
        run: |
          echo "DEBUG: Decoding certificate into cert.p12..."
          echo "${{ secrets.SIGN_CERT }}" | base64 -d > cert.p12
          ls -l cert.p12

      # 9. Firma digitale dei PDF utilizzando il file di configurazione da .JSignPdf-2.3.0/conf/conf.properties
      - name: Digitally sign PDFs
        env:
          SIGN_CERT_PASSWORD: ${{ secrets.SIGN_CERT_PASSWORD }}
          JAVA_TOOL_OPTIONS: "--add-opens=java.base/sun.security.pkcs12=ALL-UNNAMED"
        run: |
          for pdf in $(find documents -type f -name "*.pdf"); do
            filename=$(basename "$pdf")
            if [[ "$filename" == *_signed.pdf ]]; then
              continue
            fi
            echo "DEBUG: Signing $pdf..."
            java -jar jsignpdf-2.3.0/JSignPdf.jar \
              -q \
              -lpf ".JSignPdf-2.3.0/conf/conf.properties" \
              -kst PKCS12 \
              -ksf cert.p12 \
              -ksp "$SIGN_CERT_PASSWORD" \
              -ts http://timestamp.digicert.com \
              -os _signed \
              "$pdf"
            signed_pdf="${pdf%.pdf}_signed.pdf"
            if [ -f "$signed_pdf" ]; then
              echo "DEBUG: Successfully signed: $signed_pdf"
              rm "$pdf"
            else
              echo "ERROR: Signing failed for $pdf"
              exit 1
            fi
          done

      # 10. Commit e push dei PDF firmati
      - name: Commit and push signed PDFs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add documents/
          if git diff --cached --quiet; then
            echo "DEBUG: No changes to commit"
            exit 0
          fi
          git commit -m "Update PDFs with digital signature"
          git push origin HEAD:main
