name: Build and Sign Typst Documentation

on:
  push:
    branches:
      - main
    # Ignora i PDF giÃ  generati per evitare loop
    paths-ignore:
      - 'documents/**/*.pdf'

permissions:
  contents: write

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    steps:
      # 1. Clona il TUO repository (dove hai i .typ)
      - name: Checkout main repo
        uses: actions/checkout@v3

      # 2. Pull per sincronizzare con main
      - name: Pull latest changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      # 3. Installa la toolchain Rust (necessaria per Typst)
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 4. Installa Typst CLI
      - name: Install Typst CLI
        run: |
          cargo install --locked typst-cli
          typst --version

      # 5. Compila i file .typ in PDF
      - name: Compile all Typst files to PDF
        run: |
          find sources -type f -name "*.typ" | while read -r file; do
            output="documents/$(echo "$file" | sed 's|^sources/||; s|\.typ$|.pdf|')"
            mkdir -p "$(dirname "$output")"
            typst compile "$file" "$output"
          done

      # 6. Installa Java (necessario per Maven e jSignPdf)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # 7. Clona SOLO la cartella "jsignpdf" dal repo intoolswetrust/jsignpdf (shallow + sparse)
      - name: Shallow + sparse clone of jsignpdf folder
        run: |
          sudo apt-get update
          sudo apt-get install -y git maven

          # Crea una cartella dedicata e spostati dentro
          mkdir jsignpdf-src
          cd jsignpdf-src

          # Inizializza un repo vuoto e collega il remote
          git init
          git remote add origin https://github.com/intoolswetrust/jsignpdf.git
          # Scarica solo l'ultimo commit, filtrando i blob
          git pull --depth=1 --filter=blob:none origin main

          # Abilita la sparse-checkout in "cone mode"
          git sparse-checkout init --cone

          # Scarica SOLO la cartella jsignpdf
          git sparse-checkout set jsignpdf

          # Pull di nuovo con le impostazioni di sparse-checkout
          git pull --depth=1 --filter=blob:none origin main

          echo "Contenuto di jsignpdf-src:"
          ls -R

      # 8. Compila jSignPdf con Maven
      - name: Build jSignPdf from source
        run: |
          cd jsignpdf-src
          mvn clean package
          ls -R target
          cd ..

      # 9. Decodifica il certificato dal secret (PKCS#12 in Base64)
      - name: Decode signing certificate
        run: |
          echo "${{ secrets.SIGN_CERT }}" | base64 -d > cert.p12

      # 10. Firma i PDF usando il jar compilato
      - name: Digitally sign and remove unsigned PDFs
        env:
          SIGN_CERT_PASSWORD: ${{ secrets.SIGN_CERT_PASSWORD }}
          JAVA_TOOL_OPTIONS: "--add-opens=java.base/sun.security.pkcs12=ALL-UNNAMED"
        run: |
          # In base al pom.xml, il jar con dipendenze potrebbe chiamarsi JSignPdf-2.3.0.jar, 2.4.0.jar, ecc.
          # Verifica il nome esatto in "target/" dopo la compilazione (step 8).
          # Esempio generico:
          JSIGNPDF_JAR="jsignpdf-src/target/JSignPdf-2.3.0.jar"
          LIB_DIR="jsignpdf-src/target/lib"

          find documents -type f -name "*.pdf" | while read -r pdf; do
            filename=$(basename "$pdf")
            if [[ "$filename" == *_signed.pdf ]]; then
              continue
            fi

            echo "Firmo $pdf con jSignPdf compilato da sorgente..."

            # Includiamo il jar principale e tutti i .jar in target/lib
            java -cp "$JSIGNPDF_JAR:$LIB_DIR/*" net.sf.jsignpdf.JSignPdf \
              -q \
              -kst PKCS12 \
              -ksf cert.p12 \
              -ksp "$SIGN_CERT_PASSWORD" \
              -ts http://timestamp.digicert.com \
              -os _signed \
              "$pdf"

            signed_pdf="${pdf%.pdf}_signed.pdf"
            if [ -f "$signed_pdf" ]; then
              echo "PDF firmato creato: $signed_pdf"
              rm "$pdf"
            else
              echo "ERRORE: Non trovato $signed_pdf, firma fallita?"
              exit 1
            fi
          done

      # 11. Commit e push dei PDF firmati
      - name: Commit and push signed PDFs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add documents/
          if git diff --cached --quiet; then
            echo "Nessuna modifica da commitare"
            exit 0
          fi
          git commit -m "Aggiorna PDF con firma digitale (jSignPdf compilato da sorgente, shallow/sparse clone)"
          git push origin HEAD:main
