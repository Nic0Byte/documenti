name: Build and Sign Typst Documentation

on:
  push:
    branches:
      - main
    # Ignora i PDF già generati per evitare loop
    paths-ignore:
      - 'documents/**/*.pdf'

permissions:
  contents: write

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout e aggiornamento del repository (incluse le cartelle già presenti, come jsignpdf-2.3.0)
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull latest changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      # 2. Installa la toolchain Rust e Typst CLI
      - name: Set up Rust toolchain and Install Typst CLI
        uses: dtolnay/rust-toolchain@stable
      - name: Install Typst CLI
        run: |
          cargo install --locked typst-cli
          typst --version

      # 3. Compila i file .typ in PDF (salvati in documents/)
      - name: Compile Typst files to PDF
        run: |
          find sources -type f -name "*.typ" | while read -r file; do
            output="documents/$(echo "$file" | sed 's|^sources/||; s|\.typ$|.pdf|')"
            mkdir -p "$(dirname "$output")"
            typst compile "$file" "$output"
          done

      # 4. Installa Java (necessario per JSignPdf)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # 5. (Non serve scaricare lo ZIP: la cartella jsignpdf-2.3.0 è già presente)
      - name: List JSignPdf directory
        run: |
          ls -R jsignpdf-2.3.0

      # 6. Setup della configurazione: copia il file di configurazione dalla cartella jsignpdf-2.3.0 nella directory predefinita di JSignPdf
      - name: Setup JSignPdf configuration
        run: |
          mkdir -p $HOME/.JSignPdf
          # La struttura della cartella jsignpdf-2.3.0 è la seguente:
          # jsignpdf-2.3.0/
          #   conf/           ← contiene conf.properties e pkcs11.cfg
          #   docs/
          #   licenses/
          #   InstallCert.jar
          #   JSignPdf.jar
          #   jsignpdf.sh
          cp jsignpdf-2.3.0/conf/conf.properties $HOME/.JSignPdf/conf.properties
          ls -l $HOME/.JSignPdf/conf.properties

      # 7. Decodifica del certificato PKCS#12 dal secret e salvataggio in cert.p12
      - name: Decode signing certificate
        run: |
          echo "${{ secrets.SIGN_CERT }}" | base64 -d > cert.p12

      # 8. Firma digitalmente i PDF usando il JAR (che ha il manifest con Main-Class: net.sf.jsignpdf.Signer)
      - name: Digitally sign PDFs
        env:
          SIGN_CERT_PASSWORD: ${{ secrets.SIGN_CERT_PASSWORD }}
          JAVA_TOOL_OPTIONS: "--add-opens=java.base/sun.security.pkcs12=ALL-UNNAMED"
        run: |
          ls -R jsignpdf-2.3.0
          for pdf in $(find documents -type f -name "*.pdf"); do
            filename=$(basename "$pdf")
            if [[ "$filename" == *_signed.pdf ]]; then
              continue
            fi
            echo "Signing $pdf..."
            java -jar jsignpdf-2.3.0/JSignPdf.jar \
              -q \
              -kst PKCS12 \
              -ksf cert.p12 \
              -ksp "$SIGN_CERT_PASSWORD" \
              -ts http://timestamp.digicert.com \
              -os _signed \
              "$pdf"
            signed_pdf="${pdf%.pdf}_signed.pdf"
            if [ -f "$signed_pdf" ]; then
              echo "Successfully signed: $signed_pdf"
              rm "$pdf"
            else
              echo "ERROR: Signing failed for $pdf"
              exit 1
            fi
          done

      # 9. Commit e push dei PDF firmati
      - name: Commit and push signed PDFs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add documents/
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Aggiorna PDF con firma digitale"
          git push origin HEAD:main
